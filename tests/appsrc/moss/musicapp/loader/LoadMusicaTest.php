<?php

namespace moss\musicapp\loader;
use moss\standard\sanitizeValues as sany;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-20 at 20:16:48.
 */
class LoadMusicaTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var LoadMusica
     */
    protected $object;
    protected $song;
    protected $song2;
    protected $lastInserted;
    protected $lastInserted2;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new LoadMusica;
        $songData = array();
        $songData['filename'] = 'mYfile_name_.mp3.wav.aiff.flac.mp4';
        $songData['location'] = 'D:\sg\sdgs\sdg\sdg';
        $songData['bitrate'] = 32000;
        $songData['bpm'] = 75;
        $songData['title'] = 'boulevard beats';
        $songData['artist'] = 'oneil stuart';
        $songData['year'] = 1979;
        $songData['length_seconds'] = 200;
        $songData['key_end'] = '4A';
        
            $song = new \moss\musicapp\mp3SongFileInfo(39999);
            
            $song->__set('filename', sany::sanitizeString($songData['filename']));
            
            $song->__set('location', sany::sanitizeString($songData['location']));

            $bitRate = (1000 > $songData['bitrate'])?($songData['bitrate']*1000):$songData['bitrate'];
            $song->__set('bitrate', sany::sanitizeINT($bitRate, 0, 600000));
            $song->__set('length', sany::sanitizeINT($songData['length_seconds']));

            $song->__set('title', sany::sanitizeString($songData['title']));
            $song->__set('artist', sany::sanitizeString($songData['artist']));
            $song->__set('year', sany::sanitizeINT($songData['year']));
            //$song->__set('album', sany::sanitizeString($songData['album']));
            //$song->__set('genre', sany::sanitizeString($songData['genre']));
            //$song->__set('comment', sany::sanitizeString($songData['comment']));
            //$song->__set('track_number', sany::sanitizeINT($songData['track']));
            

            //$song->__set('bpm', sany::sanitizeString($songData['bpm']));
            //$song->__set('fBPM', sany::sanitizeString($songData['fBPM']));
            //$song->__set('bpm_start', sany::sanitizeString($songData['bpm_start']));

            //$song->__set('initial_key', sany::sanitizeString($songData['initial_key']));
            //$song->__set('key_start', sany::sanitizeString($songData['key_start']));
            //$song->__set('key_end', sany::sanitizeString($songData['key_end']));
            //$song->__set('content_group_description', sany::sanitizeString($songData['content_group_description']));
        
        $this->song = $song;
        
        $song->__set('filename', 'DJ_Godfather_-_Read_Between_The_Lines_Clean_.wl.mp3');
        $song->__set('location', '/media/Home/MUSICA/whitelabel/Breakbeat/DJ Godfather');
        $song->__set('title', 'Read Between The Lines (Clean)');
        $song->__set('artist', 'DJ Godfather');
        $song->__set('album', 'Read Between The Lines EP');
        $song->__set('playtime', '3:00');
        $song->__set('comment', 'Downloaded from Whitelabel.net. For promotional use only');

        $this->song2 = $song;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        if($this->lastInserted)
        {
            $this->object->deleteSong($this->lastInserted);
        }
    }

    /**
     * Generated from @assert ('5M') != NULL.
     *
     * @covers moss\musicapp\loader\LoadMusica::getSongOpenKeyID
     */
    public function testGetSongOpenKeyID() {
        $this->assertNotEquals(
                NULL, $this->object->getSongOpenKeyID('5M')
        );
    }

    /**
     * Generated from @assert ('5A') != NULL.
     *
     * @covers moss\musicapp\loader\LoadMusica::getSongCamelotKeyID
     */
    public function testGetSongCamelotKeyID() {
        $this->assertNotEquals(
                NULL, $this->object->getSongCamelotKeyID('5A')
        );
    }

    /**
     * Generated from @assert ('Hip-Hop') != NULL.
     *
     * @covers moss\musicapp\loader\LoadMusica::getSongGenreID
     */
    public function testGetSongGenreID() {
        $this->assertNotEquals(
                NULL, $this->object->getSongGenreID('Hip-Hop')
        );
    }

    /**
     * Generated from @assert ('Hip Hop') != NULL.
     *
     * @covers moss\musicapp\loader\LoadMusica::getSongGenreID
     */
    public function testGetSongGenreID2() {
        $this->assertNotEquals(
                NULL, $this->object->getSongGenreID('Hip Hop')
        );
    }

    /**
     * Generated from @assert ('Electronica') != NULL.
     *
     * @covers moss\musicapp\loader\LoadMusica::checkSongGenre
     */
    public function testCheckSongGenre() {
        $this->assertNotEquals(
                NULL, $this->object->checkSongGenre('Electronica')
        );
    }

    /**
     * @covers moss\musicapp\loader\LoadMusica::insertSongKeys
     * @todo   Implement testInsertSongKeys().
     */
    public function testInsertSongKeys() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers moss\musicapp\loader\LoadMusica::addSongGenreToIndex
     * @todo   Implement testAddSongGenreToIndex().
     */
    public function testAddSongGenreToIndex() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers moss\musicapp\loader\LoadMusica::insertSongGenres
     * @todo   Implement testInsertSongGenres().
     */
    public function testInsertSongGenres() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers moss\musicapp\loader\LoadMusica::insertSongBPMs
     * @todo   Implement testInsertSongBPMs().
     */
    public function testInsertSongBPMs() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers moss\musicapp\loader\LoadMusica::insertSongBasics
     * @todo   Implement testInsertSongBasics().
     */
    public function testInsertSongBasics() {
        
        $this->lastInserted = $this->object->insertSongBasics($this->song);
        echo $this->lastInserted;
        $this->assertNotEquals(
                NULL, $this->lastInserted
        );

        /*
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
        // */
    }
    
    public function testGetSongID() {
    
        $this->assertEquals(22953,
                $this->object->getSongID('DJ_Godfather_-_Read_Between_The_Lines_Clean_.wl.mp3', 
                '/media/Home/MUSICA/whitelabel/Breakbeat/DJ Godfather'));
    }
    /**
     * @covers moss\musicapp\loader\LoadMusica::updateSongID
     * @todo   Implement testUpdateSongID().
     */
    public function testUpdateSongID() {

        $this->lastInserted2 = 
            $this->object->getSongID('DJ_Godfather_-_Read_Between_The_Lines_Clean_.wl.mp3', 
                '/media/Home/MUSICA/whitelabel/Breakbeat/DJ Godfather');
        
        echo '   previous ID: ' . $this->lastInserted2;  //22953
        
        $retVal = $this->object->updateSongID($this->lastInserted2, $this->song2);
        
        $this->assertNotEquals(FALSE, $retVal);
        
        /*
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
        // */
    }

    /**
     * @covers moss\musicapp\loader\LoadMusica::insertSong
     * @todo   Implement testInsertSong().
     */
    public function testInsertSong() {

        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
        // */
    }

}
